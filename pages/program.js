import Head from "next/head";
import ora from "ora";
import { useEffect } from "react";
import { DateSelection, SceneSelector } from "../lib/components/Selectors";
import { Shows } from "../lib/components/Shows";
import { StickyNavigation } from "../lib/components/StickyNavigation";
import { useShowFilters } from "../lib/globalState/showFilters";
import { useDateInView } from "../lib/hooks/useDateInView";
import { useShows } from "../lib/hooks/useShows";
import { fetchAllShows } from "../lib/scraper/fetchAllShows.mjs";
import styles from "../styles/Home.module.css";

const title = "OSLO";

export default function Program({ scenes, allShows }) {
  const shows = useShows(allShows);
  const { newestDate, oldestDate } = useDateInView(shows);
  const { sceneOptions, setSceneOptions } = useShowFilters();

  useEffect(() => {
    setSceneOptions(scenes);
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by a magician" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>{title}</h1>
        <hr />
        <SceneSelector />
        <hr />
        <DateSelection />
        <StickyNavigation startDate={newestDate} endDate={oldestDate} />
        <Shows shows={shows} />
      </main>

      <footer className={styles.footer}>©hansmaast</footer>
    </div>
  );
}

export async function getStaticProps() {
  const fs = require("fs");
  const isDevelopment = process.env.NODE_ENV === "development";
  const filePath = "./lib/scraper/mockData.json";
  const mockDataExists = !fs.existsSync(filePath);
  let allShows = [];
  let scenes = [];

  async function fetchShowsAndUpdateMockData() {
    const showsLog = ora("Fetching consert data 🕸️").start();
    allShows = await fetchAllShows();
    scenes = [...new Set(allShows.map((show) => show.scene))];
    showsLog.succeed();

    const fsLog = ora("Saving mock data 🏗️").start();
    fs.writeFileSync(filePath, JSON.stringify(allShows));
    fsLog.succeed();
  }

  function readMockData() {
    const mockLog = ora("Using mock data, in development 🚧").start();
    allShows = JSON.parse(fs.readFileSync(filePath));
    scenes = [...new Set(allShows.map((show) => show.scene))];
    mockLog.succeed();
  }

  if (isDevelopment && mockDataExists) {
    readMockData();
  } else {
    await fetchShowsAndUpdateMockData();
  }

  return {
    props: {
      scenes,
      allShows: JSON.parse(JSON.stringify(allShows)),
    },
  };
}

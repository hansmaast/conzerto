import { isPast } from "date-fns";
import Head from "next/head";
import { useEffect, useState } from "react";
import { createClient } from "redis";
import { DateSelection, SceneSelector } from "../components/Selectors";
import { Shows } from "../components/Shows";
import { StickyNavigation } from "../components/StickyNavigation";
import { useShows } from "../hooks/useShows";
import styles from "../styles/Home.module.css";

const title = "Tært Conzært";

export default function Home({ scenes, allShows }) {
  const shows = useShows(allShows);

  const [dateInView, setDateInView] = useState(new Date());

  useEffect(() => {
    // list of elements to be observed
    const targets = document.getElementById("shows").children;

    const options = {
      root: null, // null means root is viewport
      rootMargin: "-100px",
      threshold: 0.5, // trigger callback when 50% of the element is visible
    };

    let observer = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        let dateOfEntry = new Date(entry.target.dataset.date);
        if (entry.isIntersecting && dateOfEntry !== dateInView) {
          console.log("dateInView", dateInView);

          setDateInView(dateOfEntry);
        }
      });
    }, options);

    [...targets].forEach((target) => observer.observe(target));
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by a magician" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>{title}</h1>
        <hr />
        <SceneSelector
          scenes={scenes}
          selected={shows.scene}
          setSelected={shows.setScene}
        />
        <hr />
        <DateSelection
          dateOption={shows.dateOption}
          setDateOption={shows.setDateOption}
        />
        <hr />
        <StickyNavigation
          dateInView={dateInView}
          dateOption={shows.dateOption}
          scene={shows.scene}
        />
        <Shows showsToRender={shows.showsToRender} />
      </main>

      <footer className={styles.footer}>©hansmaast</footer>
    </div>
  );
}

export async function getStaticProps() {
  const client = createClient({
    url: process.env.redis_url,
  });

  client.on("error", (err) => console.log("Redis Client Error", err));

  await client.connect();

  let allShows = [];
  let shows = await client.hGetAll("shows");
  const scenes = Object.keys(shows);

  scenes.forEach((scene) => {
    shows[scene] = JSON.parse(shows[scene]);
    allShows = [...allShows, ...shows[scene]];
  });

  allShows = allShows
    .sort((a, b) => new Date(a.date) - new Date(b.date))
    .filter((show) => isPast(new Date(show.date)) === false);

  await client.disconnect();

  return {
    props: {
      shows,
      scenes,
      allShows,
    },
  };
}
